#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <stdexcept>
#include <cmath>

#define TINYOBJLOADER_IMPLEMENTATION
#include "tiny_obj_loader.h"
#include "shader.h"

// --- Globals ---
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

// Camera orbit settings
float orbit_radius = 40.0f;
float orbit_speed = 0.005f;
float orbit_angle_x = 0.0f;
float orbit_angle_z = 0.0f;
glm::vec3 cameraPos = glm::vec3(0.0f, 0.5f, orbit_radius);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
glm::vec3 cameraTarget = glm::vec3(0.0f, 0.0f, 0.0f);
float fov = 45.0f;

// Model rotation
float modelYaw = 0.0f;
float modelPitch = 0.0f;
float lastX = SCR_WIDTH / 2.0f;
float lastY = SCR_HEIGHT / 2.0f;
bool firstMouse = true;
float sensitivity = 0.2f;

// Timing
float deltaTime = 0.0f;
float lastFrame = 0.0f;

// Mouse
bool mouseButtonPressed = false;

struct Vertex {
    glm::vec3 Position;
    glm::vec3 Normal;
};

struct MeshData {
    std::vector<Vertex> vertices;
    std::vector<unsigned int> indices;
};

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow* window);
void mouse_button_callback(GLFWwindow* window, int button, int action, int mods);
bool loadObjModel(const std::string& filepath, MeshData& meshData);

int main(int argc, char* argv[]) {
    std::string objFilePath = "tungh.obj";
    if (argc > 1) objFilePath = argv[1];

    if (!glfwInit()) return -1;
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "NPR Model Viewer", nullptr, nullptr);
    if (!window) { glfwTerminate(); return -1; }

    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    glfwSetCursorPosCallback(window, mouse_callback);
    glfwSetScrollCallback(window, scroll_callback);
    glfwSetMouseButtonCallback(window, mouse_button_callback);

    glewExperimental = GL_TRUE;
    if (glewInit() != GLEW_OK) { glfwTerminate(); return -1; }

    glEnable(GL_DEPTH_TEST);

    Shader shader("shaders/toon.vert", "shaders/toon.frag");

    MeshData mesh;
    if (!loadObjModel(objFilePath, mesh)) { glfwTerminate(); return -1; }

    unsigned int VBO, VAO, EBO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    glGenBuffers(1, &EBO);

    glBindVertexArray(VAO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, mesh.vertices.size() * sizeof(Vertex), &mesh.vertices[0], GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, mesh.indices.size() * sizeof(unsigned int), &mesh.indices[0], GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, Position));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, Normal));
    glEnableVertexAttribArray(1);
    glBindVertexArray(0);

    while (!glfwWindowShouldClose(window)) {
        float currentFrame = static_cast<float>(glfwGetTime());
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;

        processInput(window);

        orbit_angle_x += orbit_speed;
        orbit_angle_z += orbit_speed;
        if (orbit_angle_x > 2 * 3.14159) orbit_angle_x -= 2 * 3.14159;
        if (orbit_angle_z > 2 * 3.14159) orbit_angle_z -= 2 * 3.14159;

        cameraPos = glm::vec3(orbit_radius * sin(orbit_angle_x), 0.5f, orbit_radius * cos(orbit_angle_z));

        glClearColor(0.1f, 0.1f, 0.2f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        shader.use();

        glm::mat4 projection = glm::perspective(glm::radians(fov), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
        glm::mat4 view = glm::lookAt(cameraPos, cameraTarget, cameraUp);
        glm::mat4 model = glm::mat4(1.0f);
        model = glm::rotate(model, glm::radians(modelPitch), glm::vec3(1.0f, 0.0f, 0.0f));
        model = glm::rotate(model, glm::radians(modelYaw), glm::vec3(0.0f, 1.0f, 0.0f));
        model = glm::scale(model, glm::vec3(50.5f));
        model = glm::translate(model, glm::vec3(0.0f, -0.25f, 0.0f));

        glm::mat3 normalMatrix = glm::transpose(glm::inverse(glm::mat3(model)));

        shader.setMat4("projection", projection);
        shader.setMat4("view", view);
        shader.setMat4("model", model);
        shader.setMat3("normalMatrix", normalMatrix);
        shader.setVec3("viewPos", cameraPos);

        std::vector<glm::vec3> lightDirs = {
            glm::normalize(glm::vec3(1, 1, 1)),
            glm::normalize(glm::vec3(-1, 1, 0.5)),
            glm::normalize(glm::vec3(0, -1, 1)),
            glm::normalize(glm::vec3(0.5, 0.5, -1)),
            glm::normalize(glm::vec3(-0.6, -0.8, 0.3)),
            glm::normalize(glm::vec3(0.3, -1.0, -0.5))
        };
        for (int i = 0; i < 6; ++i)
            shader.setVec3("lightDirs[" + std::to_string(i) + "]", lightDirs[i]);
        shader.setInt("numLights", 6);

        glBindVertexArray(VAO);
        glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(mesh.indices.size()), GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);
    glfwTerminate();
    return 0;
}

bool loadObjModel(const std::string& filepath, MeshData& meshData) {
    tinyobj::attrib_t attrib;
    std::vector<tinyobj::shape_t> shapes;
    std::vector<tinyobj::material_t> materials;
    std::string warn, err;

    if (!tinyobj::LoadObj(&attrib, &shapes, &materials, &warn, &err, filepath.c_str()))
        return false;

    std::unordered_map<std::string, unsigned int> uniqueVertices{};
    for (const auto& shape : shapes) {
        size_t index_offset = 0;
        for (size_t f = 0; f < shape.mesh.num_face_vertices.size(); ++f) {
            int fv = shape.mesh.num_face_vertices[f];
            if (fv != 3) { index_offset += fv; continue; }

            for (size_t v = 0; v < fv; ++v) {
                tinyobj::index_t idx = shape.mesh.indices[index_offset + v];
                std::string key = std::to_string(idx.vertex_index) + "/" + std::to_string(idx.normal_index);

                if (uniqueVertices.count(key) == 0) {
                    Vertex newVertex;
                    newVertex.Position = {
                        attrib.vertices[3 * idx.vertex_index + 0],
                        attrib.vertices[3 * idx.vertex_index + 1],
                        attrib.vertices[3 * idx.vertex_index + 2]
                    };

                    if (idx.normal_index >= 0) {
                        newVertex.Normal = {
                            attrib.normals[3 * idx.normal_index + 0],
                            attrib.normals[3 * idx.normal_index + 1],
                            attrib.normals[3 * idx.normal_index + 2]
                        };
                    }
                    else {
                        newVertex.Normal = glm::vec3(0.0f, 1.0f, 0.0f);
                    }

                    meshData.vertices.push_back(newVertex);
                    uniqueVertices[key] = static_cast<unsigned int>(meshData.vertices.size() - 1);
                }
                meshData.indices.push_back(uniqueVertices[key]);
            }
            index_offset += fv;
        }
    }

    return !(meshData.vertices.empty() || meshData.indices.empty());
}

// --- GLFW Callbacks ---
void framebuffer_size_callback(GLFWwindow* window, int width, int height) {
    glViewport(0, 0, width, height);
}

void processInput(GLFWwindow* window) {
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

void mouse_button_callback(GLFWwindow* window, int button, int action, int mods) {
    if (button == GLFW_MOUSE_BUTTON_LEFT) {
        if (action == GLFW_PRESS) {
            mouseButtonPressed = true;
            firstMouse = true;
        }
        else if (action == GLFW_RELEASE) {
            mouseButtonPressed = false;
        }
    }
}

void mouse_callback(GLFWwindow* window, double xposIn, double yposIn) {
    if (!mouseButtonPressed) {
        lastX = static_cast<float>(xposIn);
        lastY = static_cast<float>(yposIn);
        firstMouse = true;
        return;
    }

    float xpos = static_cast<float>(xposIn);
    float ypos = static_cast<float>(yposIn);

    if (firstMouse) {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    float xoffset = xpos - lastX;
    float yoffset = lastY - ypos;
    lastX = xpos;
    lastY = ypos;

    xoffset *= sensitivity;
    yoffset *= sensitivity;

    modelYaw += xoffset;
    modelPitch += yoffset;
    if (modelPitch > 89.0f) modelPitch = 89.0f;
    if (modelPitch < -89.0f) modelPitch = -89.0f;
}

void scroll_callback(GLFWwindow* window, double xoffset, double yoffset) {
    fov -= (float)yoffset;
    if (fov < 1.0f) fov = 1.0f;
    if (fov > 60.0f) fov = 60.0f;
}
